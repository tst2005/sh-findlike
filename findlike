#!/bin/sh

# POSIX Shell function to implement mininal find-like command

# Difference between find behavior :
# * does not follow dot-named item (like: find ! -name '.*' ) EDIT: it now follow hided files


# Usefull for :
# * call a shell function (find use fork, can not call defined function)
# * detecting deadlink and more ...

# ! not exists (or permission denied)
# f file
# d directory
# s socket
# p pipe (FIFO)
# b block special file
# c character special file
# U unknown
# lX symlink of type X
# l! dead [sym]link
# lf symlink to file
# ld symlink to directory

# pfind() <callback> [<directory> [<directories ...>]]
pfind() {
	local hand="$1";shift
	if [ $# -eq 0 ]; then
		pfind "$hand" .
		return $?
	fi
	if [ $# -gt 1 ] ;then
		for item in "$@"; do
			pfind "$hand" "$item"
		done
	fi
	local item="$1"
	local type1=''
	if [ -h "$item" ]; then
		type1='l'
	elif [ ! -e "$item" ]; then continue ;# empty directory => item='dir/*'
	elif [ -d "$item" ]; then
		if "$hand" 'd' "$item" && \
		[ -r "$item/" ]; then
			for childitem in "$item"/*; do
				pfind "$hand" "$childitem"
			done
			for childitem in "$item"/.*; do
				case "$childitem" in
					*/.|*/..) continue ;;
				esac
				pfind "$hand" "$childitem"
			done
		fi
		return 0
	fi
	local type='U'
	if [ ! -e "$item" ]; then type='!';
	elif [ -f "$item" ]; then type='f'; 
	elif [ -d "$item" ]; then type='d';
	elif [ -S "$item" ]; then type='s';
	elif [ -p "$item" ]; then type='p';
	elif [ -b "$item" ]; then type='b';
	elif [ -c "$item" ]; then type='c';
	fi
	"$hand" "$type1$type" "$item"
	return $?
}

x() {
	echo "$1 $2"
	if [ "$1" = "d" ] && [ ! -r "$2" ]; then return 1; fi
	return 0
}
pfind x "$@"
